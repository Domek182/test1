main

#include <iostream>
#include "Punkt.h"
using namespace std;

int main()
{
    int x,y,x1,y1,z1,x2,y2,z2;
    x2 = 2;
    y2 = -1;
    z2 = 2;

    cout<<"Podaj wspolrzedna x\n";
    cin>>x;
    cout<<"Podaj wspolrzedna y\n";
    cin>>y;
    Punkt2D A(x,y);
    A.Odczytaj();
    cout<<"Podaj wspolrzedna x\n";
    cin>>x1;
    cout<<"Podaj wspolrzedna y\n";
    cin>>y1;
    cout<<"Podaj wspolrzedna z\n";
    cin>>z1;
    Punkt3D V1(x1,y1,z1);
    Punkt3D V2(x2,y2,z2);
    Wektor3D U(x1,y1,z1);
    Wektor3D V(x2,y2,z2);
    U.Odczytaj();
    V.Odczytaj();
    Wektor3D W = U.Iloczyn_Wektorowy(U,V);
    W.Odczytaj();



}


header


#ifndef Punkt_h

#define Punkt_h
#include <iostream>
using namespace std;


class Punkt2D{
private:
    int x_;
    int y_;
public:
    Punkt2D(int x, int y);
    void Odczytaj ();
    void Wypisz ();

};

class Punkt3D{
private:
    int x_;
    int y_;
    int z_;
public:
    Punkt3D (int x, int y, int z) :  x_(x),  y_(y),  z_(z){}
    void Odczytaj ();
    void Wypisz ();
    int GetX();
    int GetY();
    int GetZ();
};
class Wektor3D{
private:
    int x_;
    int y_;
    int z_;

public:
    int GetX();
    int GetY();
    int GetZ();
    Wektor3D (int x, int y, int z);
    Wektor3D (Punkt3D A, Punkt3D B);
    void Odczytaj ();
    Wektor3D Przesuniecie (Wektor3D V, Punkt3D P);
    Wektor3D Dodawanie (Wektor3D V1, Wektor3D V2);
    Wektor3D Odejmowanie (Wektor3D V1, Wektor3D V2);
    Wektor3D Iloczyn_Skalarny (Wektor3D V1, Wektor3D V2);
    Wektor3D Iloczyn_Wektorowy (Wektor3D V1, Wektor3D V2);
};

#endif // Wektor_h




cpp

#include "Punkt.h"
#include <iostream>

Punkt2D::Punkt2D(int x, int y): x_(x), y_(y){}

void Punkt2D::Odczytaj(){
cout<<"["<<x_<<","<<y_<<"]\n";
}
void Punkt2D::Wypisz(){
cout<<"Wspolrzedne tego punktu to ["<<x_<<","<<y_<<"]\n";
}

void Punkt3D::Odczytaj(){
cout<<"["<<x_<<","<<y_<<","<<z_<<"]\n";
}
Punkt3D::GetX() {return x_;}
Punkt3D::GetY() {return y_;}
Punkt3D::GetZ() {return z_;}

Wektor3D::Wektor3D (int x, int y, int z) : x_(x),  y_(y),  z_(z){}

Wektor3D::Wektor3D (Punkt3D A, Punkt3D B) : x_(B.GetX()-A.GetX()),  y_(B.GetY()-A.GetY()),  z_(B.GetZ()-A.GetZ()){}

Wektor3D::GetX() {return x_;}
Wektor3D::GetY() {return y_;}
Wektor3D::GetZ() {return z_;}

void Wektor3D::Odczytaj(){
cout<<"["<<x_<<","<<y_<<","<<z_<<"]\n";
}

Wektor3D Wektor3D::Przesuniecie(Wektor3D V, Punkt3D P){
Wektor3D W(V.GetX()+P.GetX(),V.GetY()+P.GetY(),V.GetZ()+P.GetZ());
return W;
}

Wektor3D Wektor3D::Dodawanie (Wektor3D V1, Wektor3D V2){
Wektor3D W(V1.GetX()+V2.GetX(),V1.GetY()+V2.GetY(),V1.GetZ()+V2.GetZ());
return W;
}

Wektor3D Wektor3D::Odejmowanie (Wektor3D V1, Wektor3D V2){
Wektor3D W(V1.GetX()-V2.GetX(),V1.GetY()-V2.GetY(),V1.GetZ()-V2.GetZ());
return W;
}

Wektor3D Wektor3D::Iloczyn_Skalarny (Wektor3D V1, Wektor3D V2){
Wektor3D W(V1.GetX()*V2.GetX(),V1.GetY()*V2.GetY(),V1.GetZ()*V2.GetZ());
return W;
}

Wektor3D Wektor3D::Iloczyn_Wektorowy (Wektor3D V1, Wektor3D V2){
Wektor3D W(V1.GetY()*V2.GetZ()-V1.GetZ()*V2.GetY(),V1.GetZ()*V2.GetX()-V1.GetX()*V2.GetZ(),V1.GetX()*V2.GetY()-V1.GetY()*V2.GetX());
return W;
}

